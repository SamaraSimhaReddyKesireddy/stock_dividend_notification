name: Daily Dividend Check

on:
  schedule:
    - cron: '0 7 * * *'  # Runs daily at 7:00 AM UTC (you can adjust the time)

jobs:
  run-dividend-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 pandas

      - name: Run dividend check
        env:
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
        run: |
          python -c "
import requests
from bs4 import BeautifulSoup
import pandas as pd
from datetime import datetime
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

def fetch_upcoming_dividends(stock_list):
    url = 'https://www.moneycontrol.com/stocks/marketinfo/dividends_declared/index.php'
    headers = {'User-Agent': 'Mozilla/5.0'}
    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        return None
    soup = BeautifulSoup(response.content, 'html.parser')
    dividend_table = soup.find('table', class_='b_12 dvdtbl')
    if not dividend_table:
        return None
    data = []
    for row in dividend_table.find_all('tr')[2:]:
        columns = row.find_all('td')
        if len(columns) >= 6:
            stock_name = columns[0].text.strip()
            ex_date_str = columns[5].text.strip()
            try:
                ex_date = datetime.strptime(ex_date_str, '%d-%m-%Y').date()
            except ValueError:
                continue
            if stock_name.upper() in stock_list and ex_date >= datetime.now().date():
                data.append({'Stock': stock_name, 'Upcoming Dividend Date': ex_date})
    return pd.DataFrame(data)

def send_email(dividend_df):
    sender_email = '${{ secrets.EMAIL_USER }}'
    receiver_email = 'ksamarasimhareddy88@gmail.com'
    password = '${{ secrets.EMAIL_PASS }}'
    message = MIMEMultipart()
    message['From'] = sender_email
    message['To'] = receiver_email
    message['Subject'] = 'Upcoming Dividend Dates for Selected Stocks'
    if dividend_df.empty:
        html = 'No upcoming dividends found for the specified stocks.'
    else:
        html = dividend_df.to_html(index=False)
    message.attach(MIMEText(html, 'html'))
    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
        server.login(sender_email, password)
        server.sendmail(sender_email, receiver_email, message.as_string())

stock_list = [ 'BHEL', 'BPCL', 'COAL INDIA', 'DWARKESH', 'FCONSUMER', 'GAIL', 'HINDZINC', 'HUDCO', 'IEX', 'IOC', 'IRBINVIT', 'JUBZ FOOD', 'MAWANA SUG', 'NBCC', 'NHPC', 'NMDC', 'NTPC', 'ONGC', 'PAINVIT', 'PURVA', 'RAJNISH', 'ROOM', 'SAIL', 'TATA POWER', 'TATASTEEL', 'TRIDENT', 'VEDL' ]
dividend_df = fetch_upcoming_dividends(stock_list)
if dividend_df is not None:
    send_email(dividend_df)
"
